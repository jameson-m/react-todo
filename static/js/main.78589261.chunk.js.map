{"version":3,"sources":["components/TodoItem/index.js","components/AddTodoButton/index.js","views/TodoContainer/index.js","views/App/index.js","serviceWorker.js","index.js"],"names":["TodoItem","index","todo","handleDone","title","isDone","todoItemProps","useSpring","from","opacity","to","config","duration","div","style","className","onClick","AddTodoButton","isAdding","newTodoValue","handleNewTodoChange","toolbarRef","useState","clickCount","setClickCount","addButtonAnimatedProps","width","current","clientWidth","height","borderRadius","id","type","name","value","onChange","defaultProps","console","log","TodoContainer","tRef","useRef","todos","setTodos","setIsAdding","setNewTodoValue","setToolbarRef","updatedTodos","map","i","useEffect","ref","addInputWrapper","document","querySelector","setTimeout","classList","add","remove","focus","e","target","val","key","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78589261.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSpring, animated } from 'react-spring';\nimport './TodoItem.scss';\n\nfunction TodoItem({ index, todo, handleDone }) {\n  const { title, isDone } = todo;\n\n  const todoItemProps = useSpring({\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n    config: { duration: 500 },\n  });\n\n  return (\n    <animated.div style={todoItemProps} className={'todo-item'}>\n      {/* <div className={'todo-item'}> */}\n      <button\n        className={`todo-radio-button ${isDone ? 'done' : ''}`}\n        onClick={() => handleDone(index)}\n      />\n      <div className={'todo-item-body'}>\n        <div>{title}</div>\n      </div>\n    </animated.div>\n    // </div>\n  );\n}\n\nTodoItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    isDone: PropTypes.bool.isRequired,\n  }),\n  handleDone: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSpring, animated } from 'react-spring';\nimport './styles/index.scss';\n\nfunction AddTodoButton({ onClick, isAdding, newTodoValue, handleNewTodoChange, toolbarRef }) {\n  const [ clickCount, setClickCount ] = useState(0);\n\n  const percentToPxw = () => (toolbarRef ? `${toolbarRef.current.clientWidth}px` : '50px');\n\n  const addButtonAnimatedProps = useSpring({\n    width: isAdding ? percentToPxw() : '50px',\n    height: isAdding ? '75px' : '50px',\n    borderRadius: isAdding ? '15px' : '50px',\n    config: {\n      duration: 200,\n    },\n    // TODO: onRest item to resize add div on window resize\n  });\n\n  // TODO: Set up this transition to it can replace the timeouts setting #addInputWrapper\n  // const inputAnimatedProps = useSpring({\n  //   to: async (next, cancel) => {\n  //     await next({ opacity: 0 });\n  //     await next({ display: 'none' });\n  //   },\n  //   from: {\n  //     display: 'block',\n  //   },\n  // });\n\n  return (\n    <animated.div\n      id={'add-button-container'}\n      style={addButtonAnimatedProps}\n      className={`add-button ${isAdding ? '' : 'closed'}`}\n    >\n      <animated.div id={'addInputWrapper'} className={`add-form closed`}>\n        <input\n          id={'addInput'}\n          type={'text'}\n          className={'todo-edit'}\n          name={'newTodoValue'}\n          value={newTodoValue}\n          onChange={handleNewTodoChange}\n        />\n      </animated.div>\n      <button\n        onClick={() => {\n          setClickCount(clickCount + 1);\n          onClick();\n        }}\n      >\n        {isAdding ? '+' : '+'}\n      </button>\n    </animated.div>\n  );\n}\n\nAddTodoButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  isAdding: PropTypes.bool,\n  newTodoValue: PropTypes.string.isRequired,\n  handleNewTodoChange: PropTypes.func.isRequired,\n  toolbarRef: PropTypes.object,\n};\n\nAddTodoButton.defaultProps = {\n  onClick: () => console.log('Button clicked! Now add a real function.'),\n  isAdding: false,\n};\n\nexport default AddTodoButton;\n","import React, { useState, useRef, useEffect } from 'react';\nimport './TodoContainer.scss';\nimport TodoItem from '../../components/TodoItem';\nimport AddTodoButton from '../../components/AddTodoButton';\n\nfunction TodoContainer() {\n  const tRef = useRef(null);\n  const [ todos, setTodos ] = useState([\n    { title: 'task 1', isDone: false },\n    { title: 'task 2', isDone: false },\n    { title: 'task 3', isDone: false },\n    { title: 'task 4', isDone: false },\n    { title: 'task 5', isDone: false },\n  ]);\n  const [ isAdding, setIsAdding ] = useState(false);\n  const [ newTodoValue, setNewTodoValue ] = useState('');\n  const [ toolbarRef, setToolbarRef ] = useState(null);\n\n  useEffect(() => {\n    setToolbarRef(tRef);\n  }, []);\n\n  function addTodo() {\n    const addInputWrapper = document.querySelector('#addInputWrapper');\n\n    if (isAdding) {\n      setTodos([ ...todos, { title: newTodoValue, isDone: false } ]);\n      setIsAdding(false);\n      setNewTodoValue('');\n      (() => {\n        setTimeout(() => {\n          addInputWrapper.classList.add('closed');\n        }, 225);\n      })();\n    } else {\n      addInputWrapper.classList.remove('closed');\n      setIsAdding(true);\n      (() => {\n        setTimeout(() => {\n          const addInput = document.querySelector('#addInput');\n          addInput.focus();\n        }, 50);\n      })();\n    }\n  }\n\n  function handleNewTodoChange(e) {\n    const newTodoValue = e.target.value;\n    setNewTodoValue(newTodoValue);\n  }\n\n  function handleDone(index) {\n    const updatedTodos = todos.map((todo, i) => {\n      if (i === index) {\n        return {\n          ...todo,\n          isDone: !todo.isDone,\n        };\n      } else return todo;\n    });\n\n    setTodos(updatedTodos);\n  }\n\n  return (\n    <div id={'todo-container'}>\n      <h1>Todos</h1>\n      <div className={'toolbar'} ref={tRef}>\n        <AddTodoButton\n          onClick={addTodo}\n          isAdding={isAdding}\n          newTodoValue={newTodoValue}\n          handleNewTodoChange={handleNewTodoChange}\n          toolbarRef={toolbarRef}\n        />\n      </div>\n      <div className={'todo-list'}>\n        {todos.map((val, index) => (\n          <TodoItem key={`todoItem${index}`} index={index} todo={val} handleDone={handleDone} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default TodoContainer;\n","import React from 'react';\nimport './App.scss';\nimport TodoContainer from '../TodoContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className={'border-container'}>\n        <TodoContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}